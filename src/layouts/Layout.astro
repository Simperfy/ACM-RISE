---
import Navbar from '../components/Navbar.jsx'
import Footer from '../components/Footer.jsx'
export interface Props {
  title: string;
}

const { title } = Astro.props as Props;
---

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width">
  <link rel="icon" type="image/x-icon" href="/favicon.ico" />
  <title>{title}</title>
</head>

<body>
  <div class="background fixed -z-10 overflow-hidden">
    <span></span>
    <span></span>
    <span></span>
    <span></span>
    <span></span>
    <span></span>
    <span></span>
    <span></span>
    <span></span>
    <span></span>
    <span></span>
    <span></span>
    <span></span>
    <span></span>
    <span></span>
    <span></span>
    <span></span>
    <span></span>
    <span></span>
    <span></span>
  </div>
  <Navbar client:load />
  <main class="overflow-x-hidden px-8 py-20 md:px-40 md:pb-40 md:pt-20 flex flex-col gap-40">
    <slot />
  </main>
  <Footer />
</body>

</html>

<style lang="scss">
  :root {
    --color-text: #ADADAD;
    --color-bg: #03122F;
  }

  html {
    font-family: 'Roboto', ui-sans-serif, system-ui !important;
    color: var(--color-text);
    background-color: var(--color-bg);
  }

  .background {
    width: 100%;
    height: 100%;
    background: #03122F;
  }

  $particleSize: 20vmin;
  $animationDuration: 6s;
  $amount: 20;

  .background span {
    width: $particleSize;
    height: $particleSize;
    border-radius: $particleSize;
    backface-visibility: hidden;
    position: absolute;
    animation-name: move;
    animation-duration: $animationDuration;
    animation-timing-function: linear;
    animation-iteration-count: infinite;
    $colors: (#03122F,
    #093893,
    #956D2C);

    @for $i from 1 through $amount {
      &:nth-child(#{$i}) {
        color: nth($colors, random(length($colors)));
        top: random(100) * 1%;
        left: random(100) * 1%;
        animation-duration: (random($animationDuration * 10) / 10) * 1s + 60s;
        animation-delay: random(($animationDuration + 10s) * 10) / 10 * -1s;
        transform-origin: (random(50) - 25) * 1vw (random(50) - 25) * 1vh;
        $blurRadius: (random() + 0.5) * $particleSize * 0.5;
        $x: if(random() > 0.5, -1, 1);
        box-shadow: ($particleSize * 2 * $x) 0 $blurRadius currentColor;
      }
    }
  }

  @keyframes move {
    100% {
      transform: translate3d(0, 0, 1px) rotate(360deg);
    }
  }
</style>